/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.tonikelope.coronaupdater;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JProgressBar;
import net.lingala.zip4j.ZipFile;

/**
 *
 * @author tonikelope
 */
public class Init extends javax.swing.JFrame {

    public static final String USER_AGENT_WEB_BROWSER = "Mozilla/5.0 (X11; Linux x86_64; rv:61.0) Gecko/20100101 Firefox/61.0";
    public static volatile boolean MOD_UPDATE = false;
    public static volatile boolean SPANISH = false;
    public static volatile boolean ABORT_UPDATE = false;

    /**
     * Creates new form Init
     */
    public Init() {

        Helpers.GUIRunAndWait(new Runnable() {
            @Override
            public void run() {
                initComponents();
                logo_mod.setVisible(false);
                Helpers.GUI_FONT = Helpers.createAndRegisterFont(Helpers.class.getResourceAsStream("/fonts/McLaren-Regular.ttf"));
                Helpers.updateFonts(getContentPane(), Helpers.GUI_FONT, null);
            }
        });
    }

    public JProgressBar getProgress_bar() {
        return progress_bar;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        logo = new javax.swing.JLabel();
        logo_mod = new javax.swing.JLabel();
        progress_bar = new javax.swing.JProgressBar();
        status = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("CoronaUpdater");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/images/avatar_default.png")).getImage());
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        logo.setBackground(new java.awt.Color(255, 255, 255));
        logo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/corona_poker_splash.png"))); // NOI18N
        logo.setDoubleBuffered(true);
        logo.setOpaque(true);

        logo_mod.setBackground(new java.awt.Color(255, 255, 255));
        logo_mod.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        logo_mod.setDoubleBuffered(true);
        logo_mod.setOpaque(true);

        progress_bar.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        progress_bar.setDoubleBuffered(true);
        progress_bar.setStringPainted(true);

        status.setBackground(new java.awt.Color(255, 255, 255));
        status.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        status.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        status.setText("Updating...");
        status.setDoubleBuffered(true);
        status.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(logo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(logo_mod, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(progress_bar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(logo)
                .addGap(0, 0, 0)
                .addComponent(logo_mod)
                .addGap(0, 0, 0)
                .addComponent(progress_bar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(status)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:

        if (Helpers.mostrarMensajeErrorSINO(this, SPANISH ? "Â¿SEGURO?" : "SURE?") == 0) {
            ABORT_UPDATE = true;
        }
    }//GEN-LAST:event_formWindowClosing

    /*
          CORONAPOKER UPDATE PARAMS:
            
            #0 -> new coronapoker version
            #1 -> old coronapoker jar path 
            #2 -> new coronapoker jar path
            #3 -> (optional) spanish
        
          MOD UPDATE PARAMS:
            
            #0 -> old mod dir
            #1 -> new mod version
            #2 -> coronapoker jar path
            #3 -> mod update url
            #4 -> mod zip password (can be empty string)
            #5 -> (optional) spanish
     */
    public static void main(String args[]) {

        System.setProperty("sun.java2d.uiScale", "1");
        
        if (args.length < 1) {

            System.exit(1);

        } else if (args[0].endsWith("/mod")) {

            if (args.length < 3) {
                System.exit(1);
            }

            MOD_UPDATE = true;

            if (args.length >= 6) {
                SPANISH = true;
            }

        } else if (args.length < 3) {

            System.exit(1);

        } else if (args.length >= 4) {
            SPANISH = true;
        }

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Init.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Init.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Init.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Init.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        Init ventana = new Init();

        /* Create and display the form */
        Helpers.GUIRunAndWait(new Runnable() {
            @Override
            public void run() {

                if (MOD_UPDATE) {
                    if (Files.isReadable(Paths.get(args[0] + "/mod.png"))) {
                        ventana.logo_mod.setIcon(new ImageIcon(args[0] + "/mod.png"));
                        ventana.logo_mod.setVisible(true);
                    }
                    ventana.status.setText((SPANISH ? "ACTUALIZANDO MOD A >>> " : "UPDATING MOD TO >>> ") + args[1]);
                } else {
                    ventana.status.setText((SPANISH ? "ACTUALIZANDO A >>> " : "UPDATING TO >>> ") + args[0]);
                }

                ventana.pack();
                Helpers.centrarJFrame(ventana);
                ventana.setVisible(true);
            }
        });

        if (MOD_UPDATE) {

            boolean ok;

            do {
                ok = true;
                try {

                    Files.move(Paths.get(args[0]), Paths.get(args[0] + "_bak"));

                    String zip_temp_file = System.getProperty("java.io.tmpdir") + "/coronapoker_mod_" + args[1] + ".zip";

                    downloadMOD(ventana, args[3], zip_temp_file);

                    if (ABORT_UPDATE) {
                        Files.move(Paths.get(args[0] + "_bak"), Paths.get(args[0]));
                        System.exit(1);
                    } else {

                        ZipFile zipFile;

                        if (!"".equals(args[4])) {
                            zipFile = new ZipFile(zip_temp_file, args[4].toCharArray());
                        } else {
                            zipFile = new ZipFile(zip_temp_file);
                        }

                        zipFile.extractAll(args[0].replaceAll("/mod$", ""));

                        StringBuilder java_bin = new StringBuilder();

                        java_bin.append(System.getProperty("java.home")).append(File.separator).append("bin").append(File.separator).append("java");

                        String[] cmdArr = {java_bin.toString(), "-jar", args[2]};

                        Runtime.getRuntime().exec(cmdArr);

                        Files.deleteIfExists(Paths.get(zip_temp_file));

                        Helpers.deleteDirectory(args[0] + "_bak");
                    }

                } catch (Exception ex) {
                    ok = false;

                    Logger.getLogger(Init.class.getName()).log(Level.SEVERE, null, ex);

                    try {

                        Files.deleteIfExists(Paths.get(args[0]));

                        if (Files.exists(Paths.get(args[0] + "_bak"))) {
                            Files.move(Paths.get(args[0] + "_bak"), Paths.get(args[0]));
                        }

                    } catch (Exception ex1) {
                        Logger.getLogger(Init.class.getName()).log(Level.SEVERE, null, ex1);
                    }
                }

            } while (!ok && Helpers.mostrarMensajeErrorSINO(ventana, "UPDATE ERROR\n" + args[0] + "\n" + args[1] + "\n" + args[2] + "\n" + args[3] + "\n" + args[4] + "\n\n" + (SPANISH ? "Â¿VOLVER A INTENTAR?" : "RETRY?")) == 0);

            ventana.dispose();

        } else {
            boolean ok;
            do {

                ok = true;

                try {

                    Files.move(Paths.get(args[1]), Paths.get(args[1] + ".bak"));

                    downloadCoronaPoker(ventana, args[0], args[2]);

                    if (ABORT_UPDATE) {
                        Files.move(Paths.get(args[1] + ".bak"), Paths.get(args[1]));
                        System.exit(1);
                    } else {

                        StringBuilder java_bin = new StringBuilder();

                        java_bin.append(System.getProperty("java.home")).append(File.separator).append("bin").append(File.separator).append("java");

                        String[] cmdArr = {java_bin.toString(), "-jar", args[2]};

                        Runtime.getRuntime().exec(cmdArr);

                        Files.deleteIfExists(Paths.get(args[1] + ".bak"));
                    }

                } catch (Exception ex) {

                    ok = false;

                    Logger.getLogger(Init.class.getName()).log(Level.SEVERE, null, ex);

                    try {

                        Files.deleteIfExists(Paths.get(args[2]));

                        if (Files.exists(Paths.get(args[1] + ".bak"))) {
                            Files.move(Paths.get(args[1] + ".bak"), Paths.get(args[1]));
                        }

                    } catch (Exception ex1) {
                        Logger.getLogger(Init.class.getName()).log(Level.SEVERE, null, ex1);
                    }
                }

            } while (!ok && Helpers.mostrarMensajeErrorSINO(ventana, "UPDATE ERROR\n" + args[0] + "\n" + args[1] + "\n" + args[2] + "\n\n" + (SPANISH ? "Â¿VOLVER A INTENTAR?" : "RETRY?")) == 0);

            ventana.dispose();

            if (!ok) {
                Helpers.openBrowserURLAndWait("https://github.com/tonikelope/coronapoker/releases/latest");
            }

        }

    }

    public static void downloadCoronaPoker(Init ventana, String version, String output_filepath) throws MalformedURLException, IOException {

        HttpURLConnection con = null;

        try {

            URL url_api = new URL("https://github.com/tonikelope/coronapoker/releases/download/v" + version + "/CoronaPoker_" + version + ".jar");

            con = (HttpURLConnection) url_api.openConnection();

            con.addRequestProperty("User-Agent", USER_AGENT_WEB_BROWSER);

            con.setUseCaches(false);

            try (BufferedInputStream bis = new BufferedInputStream(con.getInputStream()); BufferedOutputStream bfos = new BufferedOutputStream(new FileOutputStream(output_filepath))) {

                int length = con.getContentLength();

                Helpers.GUIRun(new Runnable() {

                    public void run() {
                        ventana.getProgress_bar().setMaximum(length);
                        ventana.getProgress_bar().setValue(0);
                    }
                });

                byte[] buffer = new byte[1024];

                int reads;

                int tot = 0;

                while (!ABORT_UPDATE && (reads = bis.read(buffer)) != -1) {

                    if (!ABORT_UPDATE) {
                        bfos.write(buffer, 0, reads);

                        tot += reads;

                        int t = tot;

                        Helpers.GUIRun(new Runnable() {

                            public void run() {
                                ventana.getProgress_bar().setValue(t);
                            }
                        });
                    }
                }
            }

        } finally {

            if (con != null) {
                con.disconnect();
            }
        }

    }

    public static void downloadMOD(Init ventana, String url, String output_filepath) throws MalformedURLException, IOException {

        HttpURLConnection con = null;

        try {

            URL url_api = new URL(url);

            con = (HttpURLConnection) url_api.openConnection();

            con.addRequestProperty("User-Agent", USER_AGENT_WEB_BROWSER);

            con.setUseCaches(false);

            try (BufferedInputStream bis = new BufferedInputStream(con.getInputStream()); BufferedOutputStream bfos = new BufferedOutputStream(new FileOutputStream(output_filepath))) {

                int length = con.getContentLength();

                Helpers.GUIRun(new Runnable() {

                    public void run() {
                        ventana.getProgress_bar().setMaximum(length);
                        ventana.getProgress_bar().setValue(0);
                    }
                });

                byte[] buffer = new byte[1024];

                int reads;

                int tot = 0;

                while (!ABORT_UPDATE && (reads = bis.read(buffer)) != -1) {

                    if (!ABORT_UPDATE) {
                        bfos.write(buffer, 0, reads);

                        tot += reads;

                        int t = tot;

                        Helpers.GUIRun(new Runnable() {

                            public void run() {
                                ventana.getProgress_bar().setValue(t);
                            }
                        });
                    }
                }
            }

        } finally {

            if (con != null) {
                con.disconnect();
            }
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel logo;
    private javax.swing.JLabel logo_mod;
    private javax.swing.JProgressBar progress_bar;
    private javax.swing.JLabel status;
    // End of variables declaration//GEN-END:variables
}
