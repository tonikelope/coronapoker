/*
 * Copyright (C) 2020 tonikelope
 _              _ _        _                  
| |_ ___  _ __ (_) | _____| | ___  _ __   ___ 
| __/ _ \| '_ \| | |/ / _ \ |/ _ \| '_ \ / _ \
| || (_) | | | | |   <  __/ | (_) | |_) |  __/
 \__\___/|_| |_|_|_|\_\___|_|\___/| .__/ \___|
 ____    ___  ____    ___  
|___ \  / _ \|___ \  / _ \ 
  __) || | | | __) || | | |
 / __/ | |_| |/ __/ | |_| |
|_____| \___/|_____| \___/ 

https://github.com/tonikelope/coronapoker
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.tonikelope.coronapoker;

import java.awt.event.KeyEvent;
import javax.swing.ImageIcon;

/**
 *
 * @author tonikelope
 */
public class GameOverDialog extends javax.swing.JDialog {

    public static final int COUNTDOWN_PAUSE = 1350;
    private volatile boolean continua = false;
    private volatile String last_mp3_loop = null;
    private volatile boolean direct_gameover = false;
    private volatile RebuyDialog buyin_dialog = null;
    private volatile boolean exit = false;

    public RebuyDialog getBuyin_dialog() {
        return buyin_dialog;
    }

    public boolean isContinua() {
        return continua;
    }

    /**
     * Creates new form Recomprar
     */
    public GameOverDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        initComponents();

        if (GameFrame.getInstance().getRebuy_dialog() != null) {
            GameFrame.getInstance().getRebuy_dialog().dispose();
        }

        continue_button.requestFocus();

        Helpers.updateFonts(this, Helpers.GUI_FONT, null);

        Helpers.translateComponents(this, false);

        gifPanel.setGifIcon(new ImageIcon(getClass().getResource("/cinematics/misc/game_over.gif")), 782, 326);

        pack();
    }

    public GameOverDialog(java.awt.Frame parent, boolean modal, boolean direct) {
        super(parent, modal);

        initComponents();

        if (GameFrame.getInstance().getRebuy_dialog() != null) {
            GameFrame.getInstance().getRebuy_dialog().dispose();
        }

        direct_gameover = direct;

        continue_button.requestFocus();

        Helpers.updateFonts(this, Helpers.GUI_FONT, null);

        Helpers.translateComponents(this, false);

        if (direct_gameover) {
            spectator_button.setEnabled(false);
            continue_button.setEnabled(false);
            gifPanel.setGifIcon(new ImageIcon(getClass().getResource("/cinematics/misc/game_over_zero.gif")), 782, 326);
        } else {
            gifPanel.setGifIcon(new ImageIcon(getClass().getResource("/cinematics/misc/game_over.gif")), 782, 326);
        }

        pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        gifPanel = new com.tonikelope.coronapoker.GifPanel(false);
        continue_button = new javax.swing.JButton();
        spectator_button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setModal(true);
        setUndecorated(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                formWindowDeactivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        gifPanel.setPreferredSize(new java.awt.Dimension(782, 326));

        continue_button.setFont(new java.awt.Font("Dialog", 1, 60)); // NOI18N
        continue_button.setIcon(new ImageIcon(getClass().getResource("/images/gameover/continue_"+com.tonikelope.coronapoker.GameFrame.LANGUAGE+".png")));
        continue_button.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        continue_button.setDoubleBuffered(true);
        continue_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continue_buttonActionPerformed(evt);
            }
        });

        spectator_button.setIcon(new ImageIcon(getClass().getResource("/images/gameover/espectador_"+com.tonikelope.coronapoker.GameFrame.LANGUAGE+".png"))
        );
        spectator_button.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        spectator_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spectator_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gifPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 532, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(continue_button)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(10, 10, 10))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(spectator_button)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(gifPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(continue_button)
                .addGap(18, 18, 18)
                .addComponent(spectator_button)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            continue_button.doClick();
        }
    }//GEN-LAST:event_formKeyPressed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        GameFrame.getInstance().getTapete().hideALL();

        if (GameFrame.getInstance().getFastchat_dialog() != null) {
            GameFrame.getInstance().getFastchat_dialog().setVisible(false);
        }

        if (GameFrame.getInstance().getRegistro_dialog() != null) {
            GameFrame.getInstance().getRegistro_dialog().setVisible(false);
        }

        if (GameFrame.getInstance().getJugadas_dialog() != null) {
            GameFrame.getInstance().getJugadas_dialog().setVisible(false);
        }

        if (GameFrame.getInstance().getShortcuts_dialog() != null) {
            GameFrame.getInstance().getShortcuts_dialog().setVisible(false);
        }

        continue_button.requestFocus();

        Helpers.threadRun(() -> {
            last_mp3_loop = Audio.getCurrentLoopMp3Playing();
            if (GameFrame.SONIDOS && last_mp3_loop != null && !Audio.MP3_LOOP_MUTED.contains(last_mp3_loop)) {
                Audio.muteLoopMp3(last_mp3_loop);
            } else {
                last_mp3_loop = null;
            }
            if (!direct_gameover && !continua) {
                Audio.playWavResourceAndWait("misc/game_over.wav");
                if (!continua && !exit) {
                    Helpers.GUIRun(() -> {
                        spectator_button.setEnabled(false);
                        continue_button.setEnabled(false);
                        gifPanel.setGifIcon(new ImageIcon(getClass().getResource("/cinematics/misc/game_over_zero.gif")), 782, 326);
                    });
                    Audio.playWavResourceAndWait("misc/nocontinue.wav");
                    if (GameFrame.SONIDOS && GameFrame.SONIDOS_CHORRA) {
                        Audio.playWavResourceAndWait("misc/norebuy.wav");
                    }
                    Helpers.GUIRun(this::dispose);
                }
            } else if (!continua) {
                if (GameFrame.SONIDOS && GameFrame.SONIDOS_CHORRA) {
                    Audio.playWavResourceAndWait("misc/norebuy.wav");
                }
                Helpers.GUIRun(this::dispose);
            }
        });
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:

        GameFrame.getInstance().getTapete().showALL();

        if (last_mp3_loop != null) {
            Audio.unmuteLoopMp3(last_mp3_loop);
        }
    }//GEN-LAST:event_formWindowClosed

    private void continue_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continue_buttonActionPerformed
        // TODO add your handling code here:
        this.continua = true;

        this.exit = true;

        Audio.stopWavResource("misc/game_over.wav");

        Audio.playWavResource("misc/rebuy.wav");

        dispose();

        buyin_dialog = new RebuyDialog(GameFrame.getInstance().getFrame(), true, false, 10);

        buyin_dialog.setLocationRelativeTo(buyin_dialog.getParent());

        buyin_dialog.setVisible(true);
    }//GEN-LAST:event_continue_buttonActionPerformed

    private void spectator_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spectator_buttonActionPerformed
        // TODO add your handling code here:

        this.exit = true;

        spectator_button.setEnabled(false);
        continue_button.setEnabled(false);
        gifPanel.setGifIcon(new ImageIcon(getClass().getResource("/cinematics/misc/game_over_zero.gif")), 782, 326);

        Helpers.threadRun(() -> {
            Audio.stopWavResource("misc/game_over.wav");
            Audio.playWavResourceAndWait("misc/nocontinue.wav");
            if (GameFrame.SONIDOS && GameFrame.SONIDOS_CHORRA) {
                Audio.playWavResourceAndWait("misc/norebuy.wav");
            }
            Helpers.GUIRun(this::dispose);
        });

    }//GEN-LAST:event_spectator_buttonActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        if (isModal()) {
            Init.CURRENT_MODAL_DIALOG.add(this);
        }

    }//GEN-LAST:event_formWindowActivated

    private void formWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeactivated
        // TODO add your handling code here:
        if (isModal()) {
            try {
                Init.CURRENT_MODAL_DIALOG.removeLast();
            } catch (Exception ex) {
            }
        }
    }//GEN-LAST:event_formWindowDeactivated

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton continue_button;
    private com.tonikelope.coronapoker.GifPanel gifPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton spectator_button;
    // End of variables declaration//GEN-END:variables
}
